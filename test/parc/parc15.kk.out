module parc/parc15
import std/core/types = std/core/types = "";
import std/core = std/core = "";
pub fun test : (xs : list<int>, y : int) -> int
 = fn(xs: list<int>, y: int){
 match (xs) {
 (std/core/Cons(((.skip std/core/types/.Box((x: int)) : .Box ) as .box: .Box), (.pat0: list<int>)) : list<int> )
 -> val _ : int
 = std/core/types/.dup(x);
 val _ : ()
 = std/core/types/.drop(y);
 (match (xs) {
 (std/core/Cons(((.skip std/core/types/.Box((.pat2: int)) : .Box ) as .box: .Box), (.pat3: list<int>)) : list<int> )
 -> val _ : ()
 = (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/.drop(.pat3);
 val _ : ()
 = std/core/types/.drop(.box);
 std/core/types/();
 std/core/types/.free(xs);
 _
 -> val _ : ()
 = std/core/types/();
 val _ : ()
 = std/core/types/.dec-ref(xs);
 std/core/types/();
 });
 x;
 (.skip std/core/Nil() : (list<int>) )
 -> val _ : ()
 = std/core/types/.drop(x);
 2;
 });
 (std/core/Cons(((.skip std/core/types/.Box((.pat6: int)) : .Box ) as .box: .Box), (.pat7: list<int>)) : list<int> )
 -> val _ : ()
 = std/core/types/.drop(y);
 val _ : ()
 = (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/.drop(.pat7);
 val _ : ()
 = std/core/types/.drop(.box);
 std/core/types/();
 std/core/types/.free(xs);
 _
 -> val _ : ()
 = std/core/types/();
 val _ : ()
 = std/core/types/.dec-ref(xs);
 std/core/types/();
 });
 2;
 (.skip std/core/Nil() : (list<int>) )
 -> y;
 };
 };